1) Сами объекты OpenGL находятся в неуправляемой памяти, а потому они являются неуправляемыми ресурсами, так что хорошей идеей будет создать для них классы, реализующие интерфейс IDisposable.

Чтобы отобразить на экране что-нибудь, необходимы следующие объекты OpenGL:

Vertex Buffer Object (VBO) – хранит данные о вершинах;
Vertex Array Object (VAO) – хранит данные о формате вершин, к нему присоединяет один или несколько VBO;
Shader – представляет собой подпрограмму на языке GLSL, выполняемую на GPU;
Shader Program – объединяет несколько шейдеров в шейдерную программу.

//////////////////////////////////////////////////////////////////////////////////

В современном OpenGL некоторые части процесса отрисовки должны быть запрограммированы с помощью шейдеров.

Шейдер — специальная подпрограмма, выполняемая на GPU. Шейдеры для OpenGL пишутся на специализированном C-подобном языке — GLSL. Они компилируются самим OpenGL перед использованием.

Шейдерная программа объединяет набор шейдеров. В простейшем случае шейдерная программа состоит из двух шейдеров: вершинного и фрагментного.

Вершинный шейдер вызывается для каждой вершины. На его вход поступают данные из VAO/VBO. Его выходные данные интерполируются и поступают на вход фрагментного шейдера. Обычно, работа вершинного шейдера состоит в том, чтобы перевести координаты вершин из пространства сцены в пространство экрана и выполнить вспомогательные расчёты для фрагментного шейдера.

Фрагментный шейдер вызывается для каждого графического фрагмента (грубо говоря, пикселя растеризованной геометрии, попадающего на экран). Выходом фрагментного шейдера, как правило, является цвет фрагмента, идущий в буфер цвета. На фрагментный шейдер обычно ложится основная часть расчёта освещения.